// Generated by CoffeeScript 1.6.3
(function() {
  var UserExtractor,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  UserExtractor = (function() {
    var BAD_USERNAMES, USERNAME_PATTERNS;

    USERNAME_PATTERNS = [/\bUser\sname:\s*([A-Za-z0-9_-]+)\b/i, /\br?user[\s\=]([A-Za-z0-9_-]\\[A-Za-z0-9_-])\b/i, /\br?user\s?[\s\=]\s?([A-Za-z0-9_-]+)\b/i, /\buser\s\[([A-Za-z0-9_-]+)\]\b/i, /\buser\s\'([A-Za-z0-9_-]+)\'@\'/i, /\buser\s\"([A-Za-z0-9_-]+)\"/i, /\bfailed login \w+ from \(\w+\) for ([A-Za-z0-9_-]+)\b/i, /\bfailed login for ([A-Za-z0-9_-]+)\b/, /\bpassword for ([A-Za-z0-9_-]+)/i, /\bauth\=([A-Za-z0-9_-]+)/i, /\bfailed\sfor\s([A-Za-z0-9_-]+)\b/i, /\bsu\:\s([A-Za-z0-9_-]+)\sto\sroot\b/i, /\bchanging\sfrom\s([A-Za-z0-9_-]+)\sto\sroot\b/i, /\blogin\s([A-Za-z0-9_-]+)\b/i, /\bThe\slogon\sto\saccount:\s([A-Za-z0-9_-]+)\b/i, /\bconsole\sby\s([A-Za-z0-9_-]+)\b/i, /new\suser:\sname\=([A-Za-z0-9_-]+)/i, /\/su -? ([A-Za-z0-9_-]+)/i, /\bAccepted\spublickey\sfor\s([A-Za-z0-9_-]+)\b/i];

    BAD_USERNAMES = ['rhost', 'unknown', 'does', 'not', 'invalid', 'uid', 'from', 'refused', 'login', 'for', '1', '2', '3', 'protocol', 'tcp', 'udp', 'requested', 'name'];

    function UserExtractor(ossec_alert, event) {
      this.ossec_alert = ossec_alert;
      this.event = event;
      this.users = [];
    }

    UserExtractor.prototype.run = function() {
      if (debug) {
        console.log("Running User Extractor...");
      }
      this.extractUsers();
      return this.users;
    };

    UserExtractor.prototype.extractUsers = function() {
      var detectedUsers, match, pattern, user, _i, _len;
      for (_i = 0, _len = USERNAME_PATTERNS.length; _i < _len; _i++) {
        pattern = USERNAME_PATTERNS[_i];
        match = this.ossec_alert.message.match(pattern);
        if (match) {
          detectedUsers = (function() {
            var _j, _len1, _ref, _results;
            _ref = match.slice(1);
            _results = [];
            for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
              user = _ref[_j];
              if (__indexOf.call(BAD_USERNAMES, user) < 0) {
                _results.push(user);
              }
            }
            return _results;
          })();
          this.users = detectedUsers.map(function(user) {
            return {
              identifier: user,
              username: user
            };
          });
          Array.prototype.push.apply(this.users);
        }
      }
      if (debug) {
        return console.log("Users: " + this.users);
      }
    };

    return UserExtractor;

  })();

  module.exports = UserExtractor;

}).call(this);
