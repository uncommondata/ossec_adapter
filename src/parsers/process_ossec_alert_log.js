// Generated by CoffeeScript 1.6.3
(function() {
  var EventBuilder, GetMeta, ProcessOssecAlertLog, UserExtractor, VariableExtractor;

  EventBuilder = require('./event_builder');

  VariableExtractor = require('./extractors/variable_extractor');

  UserExtractor = require('./extractors/user_extractor');

  GetMeta = require('./extractors/get_meta');

  ProcessOssecAlertLog = (function() {
    function ProcessOssecAlertLog(ossecAlertLog) {
      var ALERT_DATETIME_GROUP_PATTERN, ALERT_DEVICE_PATTERN, ALERT_RULEID_LEVEL_COMMENT_PATTERN, ALERT_SRCIP_PATTERN, ALERT_USER_PATTERN;
      this.ossecAlertLog = ossecAlertLog;
      ALERT_DEVICE_PATTERN = /^\d{4}\s\w{3}\s\d{2}\s\d{2}:\d{2}:\d{2}\s\(?(([A-Za-z0-9_\-]+\.?){6,}?)/;
      ALERT_SRCIP_PATTERN = /^Src\sIP:\s(.*)/;
      ALERT_USER_PATTERN = /^User:\s(.*)/;
      ALERT_DATETIME_GROUP_PATTERN = /^\*\*\sAlert\s(\d+)\.\d+:.*\s-\s(.*)/;
      ALERT_RULEID_LEVEL_COMMENT_PATTERN = /^Rule:\s(\d+)\s+\(level\s(\d+)\)\s->\s(.*)/;
      if (debug) {
        console.log("Found OSSEC alert log: " + this.ossecAlertLog);
      }
      this.event = new EventBuilder();
    }

    ProcessOssecAlertLog.prototype.run = function() {
      this.extractJsonBlock();
      if (this.ossecAlert != null) {
        this.process();
        this.updateEvent();
        return this.event.event;
      } else {
        if (debug) {
          console.log("Log line does not contain an OSSEC alert?: " + this.ossecSyslogAlert);
        }
        return false;
      }
    };

    ProcessOssecAlertLog.prototype.extractJsonBlock = function() {
      var match, ossecJsonPattern;
      ossecJsonPattern = /([A-Z][a-z]{2}\s\d{1,2}\s\d{2}:\d{2}:\d{2}).*ossec:\s({\s\"crit\"\:\s\d{1,2}\,\s\"id\"\:\s\d+.*\})/;
      match = this.ossecSyslogAlert.match(ossecJsonPattern);
      if (match) {
        this.timeStamp = match[1];
      }
      if (match) {
        return this.ossecAlert = JSON.parse(match[2]);
      }
    };

    ProcessOssecAlertLog.prototype.process = function() {
      this.attributesExtractor = new OssecAlertAttributesExtractor(this.logHeader, this.ossecAlert, this.event);
      this.attributes = this.attributesExtractor.run();
      this.variableExtractor = new VariableExtractor(this.ossecAlert, this.event);
      this.variables = this.variableExtractor.run();
      this.userExtractor = new UserExtractor(this.ossecAlert, this.event);
      return this.users = this.userExtractor.run();
    };

    ProcessOssecAlertLog.prototype.updateEvent = function() {
      this.event.updateEvent({
        sourcePort: this.attributes.sourcePort
      });
      this.event.updateEvent({
        sourceIp: this.attributes.sourceIp
      });
      this.event.updateEvent({
        destinationIp: this.attributes.destinationIp
      });
      this.event.updateEvent({
        destinationPort: this.attributes.destinationPort
      });
      this.event.updateEvent({
        fileName: this.attributes.fileName
      });
      this.event.updateEvent({
        newMd5: this.attributes.newMd5
      });
      this.event.updateEvent({
        oldMd5: this.attributes.oldMd5
      });
      this.event.updateEvent({
        newSha1: this.attributes.newSha1
      });
      this.event.updateEvent({
        oldSha1: this.attributes.oldSha1
      });
      this.event.updateEvent({
        severity: this.attributes.severity
      });
      this.event.updateEvent({
        ruleId: this.attributes.ruleId
      });
      this.event.updateEvent({
        description: this.attributes.description
      });
      this.event.updateEvent({
        component: this.attributes.component
      });
      this.event.updateEvent({
        classification: this.attributes.classification
      });
      this.event.updateEvent({
        message: this.attributes.message
      });
      this.event.updateEvent({
        user: this.attributes.user
      });
      this.event.updateEvent({
        device: this.attributes.device
      });
      this.event.updateEvent({
        domains: this.variables.domains
      });
      this.event.updateEvent({
        emails: this.variables.emails
      });
      this.event.updateEvent({
        ipAddrs: this.variables.ipAddrs
      });
      this.event.updateEvent({
        users: this.users
      });
      return this.event.updateEvent({
        timestamp: this.timeStamp
      });
    };

    return ProcessOssecAlertLog;

  })();

  module.exports = ProcessOssecAlertLog;

}).call(this);

/*
//@ sourceMappingURL=process_ossec_alert_log.map
*/
